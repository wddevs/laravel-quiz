import { reactive, ref, computed } from 'vue'
import { useQuizStore } from '../stores/quiz'
import { submitLead } from '../services/quizApi'

const PHONE_RE = /^[+]?[\d\s().-]{7,20}$/

export function useLeadForm() {
    const quiz = useQuizStore()

    // --- –∫–æ–Ω—Ñ—ñ–≥ –∑–Ω–∏–∂–∫–∏ –∑ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É
    const discountCfg  = computed(() => quiz.quizData?.marketing?.discount || null)
    const maxDiscount  = computed(() => Number(discountCfg.value?.value) || 0)
    const effect       = computed(() => discountCfg.value?.effect || 'increasing') // 'increasing' | 'fixed'
    const type         = computed(() => discountCfg.value?.type   || 'percent')

    // –°–∫—ñ–ª—å–∫–∏ –∫—Ä–æ–∫—ñ–≤/–≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    const totalSteps = computed(() => quiz.quizData?.steps?.length || 0)
    const answeredCount = computed(() => Object.keys(quiz.answers || {}).length)

    // –ì–æ–ª–æ–≤–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ –∑–Ω–∏–∂–∫–∏ (STEP GAIN): –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    const discountPercent = computed(() => {
        if (!maxDiscount.value) return 0
        if (effect.value === 'fixed') return maxDiscount.value
        if (!totalSteps.value) return 0
        const p = Math.round((answeredCount.value / totalSteps.value) * maxDiscount.value)
        return Math.min(p, maxDiscount.value)
    })

    // --- state –∑ –∫–æ–Ω—Ñ—ñ–≥–∞ leadForm
    const leadCfg = computed(() => quiz.quizData?.leadForm || {})
    const fields = computed(() => Array.isArray(leadCfg.value.fields) ? leadCfg.value.fields : [])

    // —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ–æ—Ä–º–∏ –∑–∞ –∫–ª—é—á–∞–º–∏ –ø–æ–ª—ñ–≤
    const form = reactive(Object.fromEntries(fields.value.map(f => [f.key, ''])))
    const privacy = ref(true) // —è–∫—â–æ —Ç—Ä–µ–±–∞ ‚Äî –≤—ñ–∑—å–º–∏ –∑ leadCfg
    const errors = reactive({})
    const submitting = ref(false)

    // --- –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
    function validateField(key, value) {
        const def = fields.value.find(f => f.key === key)
        let err = ''
        const val = (value ?? '').toString().trim()

        if (def?.required && !val) err = '–û–±–æ–≤‚Äô—è–∑–∫–æ–≤–µ –ø–æ–ª–µ'
        if (!err && def?.type === 'tel' && val && !PHONE_RE.test(val)) err = '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω'
        if (!err && def?.type === 'name' && val.length < 2) err = '–ó–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–µ —ñ–º‚Äô—è'

        errors[key] = err
        return !err
    }

    function validateAll() {
        let ok = true
        for (const f of fields.value) {
            if (!validateField(f.key, form[f.key])) ok = false
        }
        if (!privacy.value) {
            errors.__privacy = '–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–æ–ª—ñ—Ç–∏–∫—É –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ'
            ok = false
        } else {
            delete errors.__privacy
        }
        return ok
    }

    // --- –º–∞–ø–ø—ñ–Ω–≥ "—Ç–∏–ø—É –ø–∏—Ç–∞–Ω–Ω—è" –¥–ª—è –±–µ–∫–µ–Ω–¥—É
    function mapType(step) {
        // —Å–ø—Ä–æ–±–∞ —ñ–Ω—Ñ–µ—Ä—É —Ç–∏–ø—É –¥–ª—è –±–µ–∫—É
        const hasImages = Array.isArray(step.answers) && step.answers.some(a => a?.image)
        if (hasImages) return 'images'
        // —è–∫—â–æ —É –≤–∞—Å —î –≤–ª–∞—Å–Ω–∏–π –∞—Ç—Ä–∏–±—É—Ç uiType ‚Äî –≤—ñ–¥–¥–∞–π—Ç–µ –π–æ–≥–æ:
        // return step.uiType || step.type || 'variants'
        return step.type === 'text' ? 'text' : 'variants'
    }

    // --- –ø–æ–±—É–¥–æ–≤–∞ answers[]
    function buildAnswersArray() {
        const data = quiz.quizData
        if (!data?.steps) return []
        const ans = quiz.answers // { [stepId]: answerId/value }
        return data.steps.map((step) => {
            const raw = ans[step.id]
            // –≤–∏—Ç—è–≥—É—î–º–æ label –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —è–∫—â–æ —Ü–µ radio/checkbox
            let label = raw
            if (Array.isArray(step.answers)) {
                const found = step.answers.find(a => a.id === raw || a.value === raw)
                if (found?.label) label = found.label
            }
            return {
                q: step.title,
                t: mapType(step),
                a: (label ?? '').toString(),
            }
        })
    }

    // --- –ø–æ–±—É–¥–æ–≤–∞ contacts{}
    function buildContacts() {
        const out = {}
        for (const f of fields.value) {
            const clean = (form[f.key] ?? '').toString().trim()
            out[f.key] = clean
        }
        // —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∑ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º –±–µ–∫–æ–º: "text" = —Ç–µ–ª–µ—Ñ–æ–Ω?
        if (out.phone && !out.text) out.text = out.phone
        return out
    }

    // --- extra –º–µ—Ç–∞–¥–∞–Ω—ñ (–Ω–∞ —â–æ –≤–∏—Å—Ç–∞—á–∞—î —Ñ—Ä–æ–Ω—Ç–∞)
    function buildExtra() {
        const tz = -new Date().getTimezoneOffset() / 60
        const qs = new URLSearchParams(location.search)
        return {
            href: typeof location !== 'undefined' ? location.href : '',
            userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : '',
            lang: typeof navigator !== 'undefined' ? (navigator.language || 'uk') : 'uk',
            timezone: tz,
            visitor: qs.get('vid') || '',           // üëà –î–û–î–ê–¢–ò
            session_id: qs.get('sid') || '',           // üëà –î–û–î–ê–¢–ò
            parent_origin: qs.get('parentOrigin') || '',           // üëà –î–û–î–ê–¢–ò
            project: qs.get('project') || '',           // üëà –î–û–î–ê–¢–ò
            page: qs.get('page') || '',           // üëà –î–û–î–ê–¢–ò
            cookies: {},
        }
    }

    // --- –ø–æ–≤–Ω–∏–π payload
    function buildPayload() {
        const data = quiz.quizData
        return {
            version: '1',
            answers: buildAnswersArray(),
            contacts: buildContacts(),
            status: 'new',
            viewed: null,
            paid: false,
            created: new Date().toISOString(),
            quizId: data?.uuid || data?._id || '',
            extra: buildExtra(),
            result: {},
            userId: null,
            id: null,
            projectId: null,
            delivery: {},
            bonuses: {
                enabled: Boolean(data?.marketing?.bonusesEnabled),
                items: Array.isArray(data?.marketing?.bonuses) ? data.marketing.bonuses : [],
                title: data?.marketing?.bonusesTitle || '',
            },
            preset: 'quiz',
            form: { id: 'lead-form' },
            updated: new Date().toISOString(),
            discount_percent: discountPercent.value || 0,
        }
    }

    // --- submit
    async function submit({ autoAdvance = true } = {}) {
        if (!validateAll()) return { ok: false, reason: 'validation' }
        submitting.value = true
        try {
            const payload = buildPayload()
            const resp = await submitLead(payload)

            console.log('Lead submitted, response:', payload)

            if (autoAdvance) quiz.goToThanks?.()
            return { ok: true, resp, payload }
        } catch (e) {
            errors.__submit = e?.message || '–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ä–º—É'
            return { ok: false, reason: 'network', error: e }
        } finally {
            submitting.value = false
        }
    }

    return {
        // state
        fields, form, privacy, errors, submitting, leadCfg,
        // api
        validateField, validateAll, buildPayload, submit,
    }
}
